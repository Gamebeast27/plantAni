/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 plant.gltf 
Author: LadyIReyna (https://sketchfab.com/LadyIReyna)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/dock-brookmint-valerian-three-medicinal-plants-4644464eb84d4c55a588a01a37413800
Title: Dock, brookmint, valerian three medicinal plants
*/

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF,useScroll } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import gsap from 'gsap'


export default function Model(props) {
  const { nodes, materials } = useGLTF('/plant.gltf')
  const plant = useRef()
  const scroll = useScroll() 
  const tl = useRef()
  const { camera } = useThree() // Get the camera from useThree()

  
  useFrame((state, delta) => {
    tl.current.seek(scroll.offset * tl.current.duration())
  })

  useLayoutEffect(() => {
    tl.current = gsap.timeline({defaults: {duration:2, ease:'power1.inOut'}})

    tl.current
    // .to(plant.current.rotation, {y: -1}, 2)
    // .to(plant.current.position, {x: 2}, 2)
    .to(camera.position, {x:1, z:.00005}, 2 ) 

    .to(camera.position, {x:1, z:.00005, y:1}, 10)
    // .to(plant.current.rotation, {z: -1}, 6)  
    
    // .to(plant.current.position, {x: -1}, 6)

    // .to(plant.current.rotation, {y: 0}, 11)
    // .to(plant.current.rotation, {x: 1}, 11)
    // .to(plant.current.position, {x: 0}, 11)

    // .to(plant.current.rotation, {y: 0}, 13)
    // .to(plant.current.rotation, {x: -1}, 13)    
    // .to(plant.current.position, {x: 0}, 13)

    // .to(plant.current.rotation, {y: 0}, 16)   
    // .to(plant.current.rotation, {x: 0}, 16) 
    // .to(plant.current.position, {x: 0}, 16)    

    // .to(plant.current.rotation, {y: 0}, 20)   
    // .to(plant.current.rotation, {x: 0}, 20) 
    // .to(plant.current.position, {x: 0}, 20)

    // gsap.to(camera.position, {
    //   z: () => scroll.offset * 10, // Adjust the camera z position based on scroll
    //   x: () => scroll.offset * 5, // Adjust camera x as well
    //   ease: 'power1.out',
    //   duration: 1
    // })
  }, [scroll, camera])
  

  return (
    <group {...props} dispose={null} >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.Ampfer_pflanze} />
        <mesh ref={plant} geometry={nodes.Object_3.geometry} material={materials.Bachminze} />
        <mesh geometry={nodes.Object_4.geometry} material={materials.Baldrian} />
      </group>
    </group>
  )
}

useGLTF.preload('/plant.gltf')
